{"version":3,"sources":["generated/graphql.tsx","components/pages/Home/index.tsx","components/App.tsx","history/index.ts","middleware/index.ts","serviceWorker.ts","index.tsx"],"names":["TestFieldDocument","gql","Home","baseOptions","Apollo","loading","data","testField","App","exact","path","component","createBrowserHistory","uri","process","httpLink","createHttpLink","authLink","setContext","_","headers","localStorage","getItem","client","ApolloClient","link","concat","cache","InMemoryCache","Boolean","window","location","hostname","match","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAoCO,IAAMA,EAAoBC,cAAH,KCjC9B,IAUeC,EAVF,WAAO,IDsDcC,ECtDf,EDuDJC,WAAyDJ,EAAmBG,GCtDjFE,EADS,EACTA,QAASC,EADA,EACAA,KAEjB,OAAID,EACK,mDAGF,0CAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAMC,aCGHC,EARH,WACV,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,wBAAwBC,UAAWT,O,QCN5CU,gB,gBCCTC,EAAG,UAAMC,kDAAN,YACHC,EAAWC,yBAAe,CAAEH,QAC5BI,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAChC,MAAO,CACLA,QAAQ,2BACHA,GADE,IAEL,mBAAoBC,aAAaC,QAAQ,0BAKlCC,EAAS,IAAIC,eAAa,CACrCC,KAAMR,EAASS,OAAOX,GACtBY,MAAO,IAAIC,kBCJOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,cAAC,IAAD,CAAQC,QAASA,EAAjB,SACE,cAAC,iBAAD,CAAgBb,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJc,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.699126e9.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** An example field added by the generator */\n  testField: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** An example field added by the generator */\n  testField: Scalars['String'];\n};\n\nexport type TestFieldQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TestFieldQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'testField'>\n);\n\n\nexport const TestFieldDocument = gql`\n    query testField {\n  testField\n}\n    `;\n\n/**\n * __useTestFieldQuery__\n *\n * To run a query within a React component, call `useTestFieldQuery` and pass it any options that fit your needs.\n * When your component renders, `useTestFieldQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTestFieldQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTestFieldQuery(baseOptions?: Apollo.QueryHookOptions<TestFieldQuery, TestFieldQueryVariables>) {\n        return Apollo.useQuery<TestFieldQuery, TestFieldQueryVariables>(TestFieldDocument, baseOptions);\n      }\nexport function useTestFieldLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TestFieldQuery, TestFieldQueryVariables>) {\n          return Apollo.useLazyQuery<TestFieldQuery, TestFieldQueryVariables>(TestFieldDocument, baseOptions);\n        }\nexport type TestFieldQueryHookResult = ReturnType<typeof useTestFieldQuery>;\nexport type TestFieldLazyQueryHookResult = ReturnType<typeof useTestFieldLazyQuery>;\nexport type TestFieldQueryResult = Apollo.QueryResult<TestFieldQuery, TestFieldQueryVariables>;","import React from \"react\";\nimport { useTestFieldQuery } from \"../../../generated/graphql\";\n\nconst Home = () => {\n  const { loading, data } = useTestFieldQuery();\n\n  if (loading) {\n    return <>Loading ...</>;\n  }\n\n  return <>{data?.testField}</>;\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"../styles/App.scss\";\nimport Home from \"./pages/Home\";\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/zaitacount-frontend/\" component={Home} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst uri = `${process.env.REACT_APP_SERVER_URL}/graphql`;\nconst httpLink = createHttpLink({ uri });\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Forwarded-User\": localStorage.getItem(\"zaitacount-token\")\n    }\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n// import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport history from \"./history\";\nimport { client } from \"./middleware\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router history={history}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}