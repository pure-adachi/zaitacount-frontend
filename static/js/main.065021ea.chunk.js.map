{"version":3,"sources":["generated/graphql.tsx","components/templates/Frame/index.tsx","components/pages/Home/index.tsx","components/atoms/Input/index.tsx","history/index.ts","components/molecules/LoginForm/index.tsx","components/pages/SignIn/index.tsx","components/App.tsx","middleware/index.ts","serviceWorker.ts","index.tsx"],"names":["SignInDocument","gql","ViewerDocument","useViewerQuery","baseOptions","Apollo","Frame","children","fetchPolicy","loading","data","viewer","to","Home","Input","props","defaultProps","type","createBrowserHistory","LoginForm","useState","loginid","setLoginid","password","setPassword","update","_","signIn","result","token","user","accessToken","localStorage","setItem","history","push","alert","variables","className","htmlFor","id","placeholder","required","autoFocus","value","onChange","e","target","Button","variant","block","onClick","SignIn","App","exact","path","component","uri","process","httpLink","createHttpLink","authLink","setContext","headers","getItem","client","ApolloClient","link","concat","cache","InMemoryCache","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.065021ea.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  id: Scalars['ID'];\n  token: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  signIn?: Maybe<SignInPayload>;\n};\n\n\nexport type MutationSignInArgs = {\n  input: SignInInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of SignIn */\nexport type SignInInput = {\n  loginid?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of SignIn */\nexport type SignInPayload = {\n  __typename?: 'SignInPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  result?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  accessToken?: Maybe<AccessToken>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type SignInMutationVariables = Exact<{\n  loginid?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & { signIn?: Maybe<(\n    { __typename?: 'SignInPayload' }\n    & Pick<SignInPayload, 'result'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & { accessToken?: Maybe<(\n        { __typename?: 'AccessToken' }\n        & Pick<AccessToken, 'token'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type ViewerQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ViewerQuery = (\n  { __typename?: 'Query' }\n  & { viewer?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\n\nexport const SignInDocument = gql`\n    mutation signIn($loginid: String, $password: String) {\n  signIn(input: {loginid: $loginid, password: $password}) {\n    user {\n      accessToken {\n        token\n      }\n    }\n    result\n  }\n}\n    `;\nexport type SignInMutationFn = Apollo.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n/**\n * __useSignInMutation__\n *\n * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignInMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signInMutation, { data, loading, error }] = useSignInMutation({\n *   variables: {\n *      loginid: // value for 'loginid'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignInMutation(baseOptions?: Apollo.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n        return Apollo.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n      }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = Apollo.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = Apollo.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const ViewerDocument = gql`\n    query viewer {\n  viewer {\n    id\n  }\n}\n    `;\n\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);\n      }\nexport function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);\n        }\nexport type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;\nexport type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;\nexport type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;","import React, { ReactChild } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useViewerQuery } from \"../../../generated/graphql\";\n\ninterface Props {\n  children: ReactChild;\n}\n\nconst Frame = ({ children }: Props) => {\n  const { loading, data } = useViewerQuery({\n    fetchPolicy: \"network-only\"\n  });\n\n  if (loading) {\n    return <>Loading...</>;\n  }\n\n  if (data?.viewer) {\n    return <>{children}</>;\n  } else {\n    return <Redirect to=\"/zaitacount-frontend/sign-in\" />;\n  }\n};\n\nexport default Frame;\n","import React from \"react\";\nimport Frame from \"../../templates/Frame\";\n\nconst Home = () => {\n  return (\n    <Frame>\n      <>Home</>\n    </Frame>\n  );\n};\n\nexport default Home;\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface Props {\n  id?: string;\n  type: string;\n  className?: string;\n  placeholder?: string;\n  required?: boolean;\n  autoFocus?: boolean;\n  value: string;\n  onChange?: (e: ChangeEvent<HTMLInputElement> & FormEvent<this>) => void;\n}\n\nconst Input = (props: Props) => {\n  return <input {...props} />;\n};\n\nInput.defaultProps = {\n  type: \"text\"\n};\n\nexport default Input;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Input from \"../../atoms/Input\";\nimport { useSignInMutation } from \"../../../generated/graphql\";\nimport history from \"../../../history\";\n\nconst LoginForm = () => {\n  const [loginid, setLoginid] = useState<string | undefined>();\n  const [password, setPassword] = useState<string | undefined>();\n  const [signIn] = useSignInMutation({\n    update: (_, { data }) => {\n      const result = data?.signIn?.result || false;\n\n      if (result) {\n        const token = data?.signIn?.user?.accessToken?.token as string;\n        localStorage.setItem(\"zaitacount-token\", token);\n        history.push(\"/zaitacount-frontend/\");\n      } else {\n        alert(\"Incorrect login id or password\");\n      }\n    },\n    variables: {\n      loginid,\n      password\n    }\n  });\n\n  return (\n    <div className=\"form-signin\">\n      <h1 className=\"h3 mb-3 font-weight-normal text-center\">Please sign in</h1>\n      <label htmlFor=\"inputLoginid\" className=\"sr-only\">\n        Login id\n      </label>\n      <Input\n        id=\"inputLoginid\"\n        className=\"form-control\"\n        placeholder=\"Login id\"\n        required\n        autoFocus\n        value={loginid || \"\"}\n        onChange={(e) => setLoginid(e.target.value)}\n      />\n      <label htmlFor=\"inputPassword\" className=\"sr-only\">\n        Password\n      </label>\n      <Input\n        id=\"inputPassword\"\n        type=\"password\"\n        className=\"form-control\"\n        placeholder=\"Password\"\n        required\n        value={password || \"\"}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <Button variant=\"primary\" block onClick={() => signIn()}>\n        Sign In\n      </Button>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport LoginForm from \"../../molecules/LoginForm\";\nimport { useViewerQuery } from \"../../../generated/graphql\";\n\nconst SignIn = () => {\n  const { loading, data } = useViewerQuery({\n    fetchPolicy: \"network-only\"\n  });\n\n  if (loading) {\n    return <>Loading...</>;\n  }\n\n  if (data?.viewer) {\n    return <Redirect to=\"/zaitacount-frontend\" />;\n  } else {\n    return <LoginForm />;\n  }\n};\n\nexport default SignIn;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"../styles/App.scss\";\nimport Home from \"./pages/Home\";\nimport SignIn from \"./pages/SignIn\";\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/zaitacount-frontend/\" component={Home} />\n      <Route exact path=\"/zaitacount-frontend/sign-in\" component={SignIn} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst uri = `${process.env.REACT_APP_SERVER_URL}/graphql`;\nconst httpLink = createHttpLink({ uri });\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Forwarded-User\": localStorage.getItem(\"zaitacount-token\")\n    }\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n// import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport history from \"./history\";\nimport { client } from \"./middleware\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router history={history}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}